[tool.poetry]
name = "arena-controls"
version = "0.1.0"
description = "Software toolkit to run a combat robotics event with a single cage.  Deeply a work in progress."
authors = ["Kim Chase <noreply@hi-im.kim>"]
readme = "README.md"
packages = [{include = "src"}]

[tool.poetry.dependencies]
python = "^3.9"
flask = {extras = ["async"], version = "^3.0.0"}
flask-apscheduler = "^1.13.1"
flask-socketio = "^5.3.6"
httpx = "^0.25.1"
flask-caching = "^2.1.0"
dynaconf = "^3.2.4"
expiringdict = "^1.2.2"
httpx-cache = "^0.13.0"
ratelimit = "^2.2.1"
flask-sqlalchemy = "^3.1.1"
piccolo = {extras = ["sqlite"], version = "^1.22.0"}

[tool.poetry.group.dev.dependencies]
black = "^23.11.0"
djlint = "^1.34.1"
isort = "^5.13.2"
pyproject-autoflake = "^1.0.2"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.djlint]
profile="jinja"

[tool.isort]
profile = "black"

[tool.autoflake]
# return error code if changes are needed
check = false
# make changes to files instead of printing diffs
in-place = true
# drill down directories recursively
recursive = true
# exclude file/directory names that match these comma-separated globs
exclude = "<GLOBS>"
# by default, only unused standard library imports are removed; specify a comma-separated list of additional
# modules/packages
imports = "<IMPORTS>"
# expand wildcard star imports with undefined names; this only triggers if there is only one star import in
# the file; this is skipped if there are any uses of `__all__` or `del` in the file
expand-star-imports = true
# remove all unused imports (not just those from the standard library)
remove-all-unused-imports = true
# exclude __init__.py when removing unused imports
ignore-init-module-imports = true
